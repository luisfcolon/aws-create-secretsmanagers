#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -u

clear

bold=$(tput bold)
reset=$(tput sgr0)
purple=$(tput setaf 171)
green=$(tput setaf 76)
blue=$(tput setaf 38)
cyan=$(tput setaf 6)
yellow=$(tput setaf 3)
white=$(tput setaf 7)
light_purple=$(tput setaf 111)

display_usage() {
  cat <<EOM

  ##### Create aws secrets managers #####

  Required arugments:
    - The only argument required is the project name
    - Single word project names are prefered
    - More than one word requires a dash inbetween them
    - Acceptable formats:
      - bookie
      - sparkle-motion

  Usage:
    ./cipher project-name
EOM
}

display_instructions() {
  cat <<EOM
Please have the Okta Verify app open on your phone and ready to use.
When prompted, enter the MFA token and choose the requested environment profile.
EOM
}

echo_header() {
  echo
  echo $purple$bold"---------------[ $@ ]---------------"$reset
  echo
}

echo_subheader() {
  echo
  echo $light_purple$bold"----~~ $@"$reset
  echo
}

echo_success() {
  echo $bold$green"✔"$reset $green$@$reset
}

echo_warning() {
  echo $bold$yellow"⌀"$reset $yellow$@$reset $bold$yellow"⌀"$reset
}

echo_bullet() {
  echo $blue$bold" •"$reset $blue$@$reset
}

echo_info() {
  echo $blue$@$reset
}

echo_text() {
  echo $white$@$reset
}

echo_info_content() {
  echo -n $white$1 $reset
  echo_info $2
}

install_dependencies() {
  if ! brew ls --versions jq > /dev/null; then
    echo
    echo_bullet "Installing jq"
    echo
    brew install jq
    echo
  fi
}

generate_password() {
  local profile=$1
  excluded_characters='"/\'

  echo $(aws secretsmanager get-random-password --exclude-characters $excluded_characters --password-length 32 --require-each-included-type --no-include-space --output text --profile $profile)
}

database_secrets_json_string() {
  local username=${1}
  local password=${2}

  echo "{\"dbMasterUser\": \"$username\", \"dbMasterPassword\": \"$password\", \"sumologicEndpoint\": \"\"}"
}

default_secrets_json_string() {
  echo "{\"sumologicEndpoint\": \"\"}"
}

flyway_database_secrets_json_string() {
  local master_username=${1}
  local master_password=${2}
  local app_username=${3}
  local app_password=${4}

  echo "{\"dbMasterUser\": \"$master_username\", \"dbMasterPassword\": \"$master_password\", \"dbUser\": \"$app_username\", \"dbPassword\": \"$app_password\", \"dbUrl\": \"\", \"sumologicEndpoint\": \"\"}"
}

tags_string() {
  local app_name=${1}
  local environment=${2}
  cost_code="SP"
  cost_center="ENG"
  name="$app_name-secretsmanager-$environment"

   echo "[{\"Key\": \"Name\", \"Value\": \"$name\"}, {\"Key\": \"Service\", \"Value\": \"$app_name\"}, {\"Key\": \"Environment\", \"Value\": \"$environment\"}, {\"Key\": \"Cost_Code\", \"Value\": \"SP\"}, {\"Key\": \"Cost_Center\", \"Value\": \"ENG\"}]"
}

if [ -z "$1" ]; then
  display_usage
  exit 1
fi

app_name=$1
database_support=false
flyway_support=false

echo_header "Secrets Managers for $app_name"
display_instructions
install_dependencies

echo
echo "Will this project be using Postgres?"
select yn in "Yes" "No"; do
  case $REPLY in
    1|y|Y|yes|Yes) database_support=true; break;;
    2|n|N|no|No) database_support=false; break;;
  esac
done

if $database_support; then
  echo
  echo "Will this project manage Postgres migrations using Flyway?"
  select yn in "Yes" "No"; do
    case $REPLY in
      1|y|Y|yes|Yes) flyway_support=true; break;;
      2|n|N|no|No) flyway_support=false; break;;
    esac
  done
fi

#
# Edge
#
environment="edge"
profile="stash-$environment"
secrets_name="$app_name-$environment"
tags_string=$(tags_string $app_name $environment)

echo_subheader "Creating secrets manager: $app_name-$environment"
echo_text "You will be prompted for an Okta Verify MFA token"
echo_info_content "After entering the MFA token, please select:" "edge_engineers"

stash-okta --profile stash-edge --force

if $database_support; then
  db_master_user="${app_name//-/_}_master_user_$environment"
  db_master_password=$(generate_password $profile)

  if $flyway_support; then
    db_app_username="${app_name//-/_}_app_user_$environment"
    db_app_password=$(generate_password $profile)
    secrets_string=$(flyway_database_secrets_json_string $db_master_user $db_master_password $db_app_username $db_app_password)
  else
    secrets_string=$(database_secrets_json_string $db_master_user $db_master_password)
  fi
else
  secrets_string=$(default_secrets_json_string)
fi

secretsmanager_edge=$(aws secretsmanager create-secret --name "$secrets_name" --description "Secrets for $app_name" --secret-string "$secrets_string" --tags "$tags_string" --profile $profile)
echo_success "Created secrets manager: $secrets_name"

#
# Staging
#
environment="staging"
profile="stash-$environment"
secrets_name="$app_name-$environment"
tags_string=$(tags_string $app_name $environment)

echo_subheader "Creating secrets manager: $app_name-$environment"
echo_text "You will be prompted for another Okta Verify MFA token"
echo
echo_warning "DO NOT USE THE SAME TOKEN that was just used for edge"
echo_warning "Let Okta Verify cycle to the next token"
echo
echo_info_content "After entering the MFA token, please select:" "staging_backend-eng"

stash-okta --profile stash-staging --force

if $database_support; then
  db_master_user="${app_name//-/_}_master_user_$environment"
  db_master_password=$(generate_password $profile)

  if $flyway_support; then
    db_app_username="${app_name//-/_}_app_user_$environment"
    db_app_password=$(generate_password $profile)
    secrets_string=$(flyway_database_secrets_json_string $db_master_user $db_master_password $db_app_username $db_app_password)
  else
    secrets_string=$(database_secrets_json_string $db_master_user $db_master_password)
  fi
else
  secrets_string=$(default_secrets_json_string)
fi

secretsmanager_staging=$(aws secretsmanager create-secret --name "$secrets_name" --description "Secrets for $app_name" --secret-string "$secrets_string" --tags "$tags_string" --profile $profile)
echo_success "Created secrets manager: $secrets_name"

#
# Prod
#
environment="prod"
profile="stash-$environment"
secrets_name="$app_name-$environment"
tags_string=$(tags_string $app_name $environment)

echo_subheader "Creating secrets manager: $app_name-$environment"
echo_text "You will be prompted for another Okta Verify MFA token"
echo
echo_warning "DO NOT USE THE SAME TOKEN that was just used for staging"
echo_warning "Let Okta Verify cycle to the next token"
echo
echo_info_content "After entering the MFA token, please select:" "prod_backend-eng"

stash-okta --profile stash-prod --force

if $database_support; then
  db_master_user="${app_name//-/_}_master_user_$environment"
  db_master_password=$(generate_password $profile)

  if $flyway_support; then
    db_app_username="${app_name//-/_}_app_user_$environment"
    db_app_password=$(generate_password $profile)
    secrets_string=$(flyway_database_secrets_json_string $db_master_user $db_master_password $db_app_username $db_app_password)
  else
    secrets_string=$(database_secrets_json_string $db_master_user $db_master_password)
  fi
else
  secrets_string=$(default_secrets_json_string)
fi

secretsmanager_prod=$(aws secretsmanager create-secret --name "$secrets_name" --description "Secrets for $app_name" --secret-string "$secrets_string" --tags "$tags_string" --profile $profile)
echo_success "Created secrets manager: $secrets_name"

echo
echo_header "Secrets Manager Arns"
echo_text "Save these values, you will need them later"
echo_bullet $(echo ${secretsmanager_edge} | jq -r ".ARN")
echo_bullet $(echo ${secretsmanager_staging} | jq -r ".ARN")
echo_bullet $(echo ${secretsmanager_prod} | jq -r ".ARN")
echo
